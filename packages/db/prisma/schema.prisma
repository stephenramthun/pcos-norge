generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  emailVerified     Boolean?
  name              String
  givenName         String
  familyName        String
  birthdate         DateTime
  phoneNumber       String
  country           String
  region            String
  postalCode        String
  streetAddress     String
  createdAt         DateTime            @default(now())
  accounts          Account[]
  AdminUser         AdminUser?
  agreement         Agreement?
  EmailDelivery     EmailDelivery[]
  EmailSubscription EmailSubscription[]
  PaymentHistory    PaymentHistory[]
  sessions          Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agreement {
  id        String          @id
  userId    String          @unique
  status    AgreementStatus @default(PENDING)
  start     String?
  stop      String?
  createdAt DateTime        @default(now())
  paidDate  DateTime?
  chargeId  String
  user      User            @relation(fields: [userId], references: [id])
}

model EmailSubscription {
  userId String
  type   SubscriptionType
  user   User             @relation(fields: [userId], references: [id])

  @@unique([userId, type])
}

model EmailDelivery {
  userId  String
  emailId String
  user    User   @relation(fields: [userId], references: [id])

  @@unique([userId, emailId])
}

model AdminUser {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model PaymentHistory {
  userId   String
  chargeId String
  data     Json
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, chargeId])
}

enum AgreementStatus {
  ACTIVE
  PENDING
  EXPIRED
  STOPPED
  UPDATING
}

enum SubscriptionType {
  MEDLEMSBREV
  NYHETSBREV
}
